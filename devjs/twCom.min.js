/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(2);
__webpack_require__(3);
__webpack_require__(4);
__webpack_require__(6);
__webpack_require__(5);


/***/ }),
/* 1 */
/***/ (function(module, exports) {




/***/ }),
/* 2 */
/***/ (function(module, exports) {

if( typeof window.twCom === "undefined"){
    window.twCom = {};
}


(function(){
    "use strict";


      function Global (){

      }

      Global.prototype.addClass = function(Ele , ClassName) {
          if(Ele.classList && typeof ClassName === "string"){
              Ele.classList.add(ClassName);
          }else if (Ele.className && typeof ClassName === "string" ){
              Ele.className += " " + ClassName;
          }else{
              throw new Error("addClass의 인자는 (Element객체,'넣을클래스명') 으로 정의해야합니다.");
          }
      };


      Global.prototype.removeClass = function(Ele, ClassName) {
            if(Ele.classList && typeof ClassName === "string"){
                Ele.classList.remove(ClassName);
            }else if (Ele.className && typeof ClassName === "string" ){
                Ele.className = Ele.className.replace(new RegExp("(^|\\b)("+ClassName.split(' ').join("|")+")(\\b|$)","gi")," ");
            }else{
                throw new Error("removeClass의 인자는 (Element객체,'넣을클래스명 [구분자 공백]') 으로 정의해야합니다.");
            }
      };


      Global.prototype.hasClass = function(Ele , ClassName) {
          if(Ele.classList && typeof ClassName === "string"){
              return Ele.classList.contains(ClassName);
          }else if (Ele.className && typeof ClassName === "string" ){
              return new RegExp("(^|)" + ClassName + "(|$)","gi").test(Ele.className);
          }else{
              throw new Error("hasClass의 인자는 (Element객체,'넣을클래스명') 으로 정의해야합니다.");
          }
      };



      Global.prototype.extends = function(obj1 , obj2 , command) {
        var newObj = {};
        for(var prop in obj1){
          if(obj1.hasOwnProperty(prop)){
              newObj[prop] = obj1[prop];
          }
        }
        for(var ob in obj2){
            if(newObj.hasOwnProperty(ob)){
                newObj[ob] = obj2[ob];
            }
        }
        return newObj;
      };
      
      Global.prototype.cssObject = function(element){
          var Ele = element;
          var css = Ele.currentStyle || window.getComputedStyle(Ele);
          return {
            getCss : function(prop){
              if( typeof prop === "string" ){
                return css[prop];
              } else {
                throw new Error("Css propertyName은 String 으로 정의해주세요.");
              }
            },
            setCss : function(prop , value){
                Ele.style[prop] = value;
            }
          };
      };

    twCom.fn = new Global();
})();


/***/ }),
/* 3 */
/***/ (function(module, exports) {

(function () {
    "use strict";


      function TextField() {
          // input field 생성자
          if ( this instanceof TextField ){
            this.Elements = document.querySelectorAll("input:not([type]),input[type=text],input[type=password],input[type=email],input[type=url],input[type=time],input[type=date],input[type=datetime],input[type=datetime-local],input[type=tel],input[type=number],input[type=search]");
            this.Init();

          }else{
             return new TextField();
          }
      }




      TextField.prototype.Init = function(){
          var text_fields = this.Elements;
          for (var i = 0; i < text_fields.length; i++) {
            text_fields[i].addEventListener("focus", this.field_focus);
            text_fields[i].addEventListener("blur", this.field_blur);
          }
      };
      TextField.prototype.field_focus = function(){
        twCom.fn.addClass(this , "active");
      };
      TextField.prototype.field_blur = function(){
        twCom.fn.removeClass(this,"active");
        //중첩 3항 연산자 text_field안에 value가 존재하면 valid라는 class 를 추가하고 value가 존재하지않으면 valid 클래스를 제거해야함
        //즉 text_field 내에 입력값이 존재하면 valid 라는 class를 추가하고 없으면 field 내에 valid 라는 클래스를 찾아서 있으면 제거함
        (this.value.length > 0 ? twCom.fn.addClass(this,"valid") : ( twCom.fn.hasClass(this,"valid") ? twCom.fn.removeClass(this,"valid") : "" ));

      };




      function SelectBox(){
        if ( this instanceof SelectBox ){
          this.selects = document.querySelectorAll("select:not(.browser-default)");
          this.Elements = document.getElementsByClassName("tw-select-box");
          this.selectInit();
          this.selectSet();
        } else {
           return new SelectBox();
        }
      }



      SelectBox.prototype.selectInit = function(){
          var select_Ele_list = this.selects;
          var self = this;
          for (var i = 0; i < select_Ele_list.length; i++) {
              var select_box = document.createElement("div");
              var input = document.createElement("input");
              var input_line = document.createElement("hr");
              var select_ul = document.createElement("ul");
              var down_caret = document.createElement("i");


                for (var j = 0; j < select_Ele_list[i].options.length; j++) {
                    var select_option =  select_Ele_list[i].options[j];
                    var li = document.createElement("li");

                    self.optionExtend(li , select_option , input);
                    select_ul.appendChild(li);
                }

              self.attrExtends(input , select_Ele_list[i]);
              select_box.className = "tw-select-box tw-input-field";
              select_ul.className = "tw-dropdown select-dropdown";
              input_line.className = "bottomline";
              input.setAttribute("readonly","true");
              down_caret.className = "fa fa-caret-down select-caret-down";

              select_box.appendChild(down_caret);
              select_box.appendChild(input);
              select_box.appendChild(input_line);
              select_box.appendChild(select_ul);
              select_Ele_list[i].outerHTML = select_box.outerHTML;
          }
      };


      SelectBox.prototype.optionExtend = function(litag,  Option, input){
          var self = this;
          var span = document.createElement("span");
          var value = Option.getAttribute("value") || Option.innerText;

           litag.setAttribute("value", value);
           span.innerText = Option.innerText;

           if ( Option.selected ){
             twCom.fn.addClass(litag , "selected");
             input.setAttribute("value",litag.getAttribute("value"));
           }

           if ( Option.disabled ){
             twCom.fn.addClass(litag ,  "disabled");
           }

           litag.appendChild(span);
      };

      SelectBox.prototype.attrExtends = function(childEle, parentEle){
          childEle.id = parentEle.id;
          childEle.className = parentEle.className + " select-input";
          childEle.name = parentEle.name;
      };
      SelectBox.prototype.selectSet = function(){
        var Elements = this.Elements;
        var self = this;

        for(var i = 0; i < Elements.length; i++){
            var select_input = Elements[i].getElementsByClassName("select-input")[0];
            var select_dropdown = Elements[i].getElementsByClassName("select-dropdown")[0];
            Elements[i].addEventListener("focusin", self.selectOpen);
            Elements[i].addEventListener("focusout", self.selectClose);

            if ( "ontouchstart" in window ){
              select_dropdown.addEventListener("touchstart", self.seleted);
            }
            select_dropdown.addEventListener("mousedown", self.seleted);
         }
      };


      SelectBox.prototype.selectOpen = function(e){
         var select_element = this;
         var select_dropdown = select_element.getElementsByClassName("select-dropdown")[0];
         var select_column = select_dropdown.getElementsByTagName("li");
         var column_css = twCom.fn.cssObject(select_column[0]);
         var dropdown_css = twCom.fn.cssObject(select_dropdown);
         var regExp = new RegExp("px|rem");
         var unit = regExp.exec(column_css.getCss("min-height"));
         var height= column_css.getCss("min-height").replace(regExp, "") * select_column.length;

         var htmlCss, htmlElement, scrollBottom, elOffset;


         if( unit[0] === "rem" ){
             htmlElement = document.getElementsByTagName("html")[0];
             htmlCss = twCom.fn.cssObject(htmlElement);
             height = Number(height) * htmlCss.getCss("fontSize").replace(regExp , "");
         }

         if ( height > 500 ) height = 500 ;
         elOffset = select_element.getBoundingClientRect();

         scrollBottom = (document.documentElement.clientHeight - document.body.getBoundingClientRect().top)
                          - (this.offsetTop - this.getBoundingClientRect().height / 2);

          if ( scrollBottom <= height ){
              dropdown_css.setCss("top", "-" + (height - elOffset.height) + "px");
          } else {
              dropdown_css.setCss("top",  "0px");
          }


         TweenLite.to( select_dropdown, 0.3, {
             opacity : 1,
             display : "block",
          });
      };

      SelectBox.prototype.selectClose = function(e){
         var select_element = this;
         var select_dropdown = select_element.getElementsByClassName("select-dropdown")[0];
         var select_options = select_dropdown.getElementsByTagName("li");


         TweenLite.to( select_dropdown, 0.3, {
             opacity : 0,
             display : "none",
          });
      };




      SelectBox.prototype.seleted = function(e){
        var targetEle = e.target || e.srcElement;
        var self = this;
        var select_dropdown = self.parentElement;
        var select_input = select_dropdown.getElementsByTagName("input")[0];

        if(twCom.fn.hasClass(targetEle,"disabled") || twCom.fn.hasClass(targetEle.parentElement,"disabled")){
             return false;
        }


        var selectedElement = self.getElementsByClassName("selected")[0];

        if( selectedElement ){
          twCom.fn.removeClass(selectedElement, "selected");
        }

        var value = targetEle.getAttribute("value") ||  targetEle.parentElement.getAttribute("value");
        select_input.setAttribute("value", value);
        twCom.fn.addClass(targetEle, "selected");

        TweenLite.to( self, 0.3, {
            opacity : 0,
            display : "none",
         });
      };



      window.addEventListener("DOMContentLoaded",function(){
          twCom.form = {textField : TextField() , select : SelectBox()};
      });
})();


/***/ }),
/* 4 */
/***/ (function(module, exports) {

var ModalConstruct = (function(){
    "use strict";



    function Modal(Element_, userOption){
        if( this instanceof Modal ){
          this.Element = document.getElementById(Element_) || Element_;
          this.Init(userOption);
        } else {
          return new Modal(Element_, userOption);
        }
    }

    var DefaultOption = function(){
      this.shadow_opacity = 0.6;  //default 0.5 최소 0 , 최대 1
      this.start_top = "60";
      this.start_top_suffix = "%";
      this.end_top = "20";
      this.end_top_suffix = "%";
      this.modalOpen = function(){
      };
      this.modalClose = function(){
      };
      this.delay = 0.45;
      this.shadow_onclick_close = true;


      this.openOption = {
        display:"block",
        top: (this.end_top+this.end_top_suffix),
        scaleX : 1,
        opacity : 1,
        ease: Power3.easeOut,
        onComplete:this.modalOpen
      };

      this.closeOption = {
        display:"none",
        top: (this.start_top + this.start_top_suffix),
        scaleX : 0.7,
        opacity : 0,
        ease: Power3.easeOut,
      };

    };

    DefaultOption.prototype.setOption = function(newOption){
        var myOption = this;
        for( var prop in newOption ){
            if( myOption.hasOwnProperty(prop) ){
                myOption[prop] = newOption[prop];
            }
        }
        return myOption;
    };

    Modal.prototype.Init = function(userOption){
       var self = this;
       var ele = this.Element;
       var option = this.Option = new DefaultOption();
       twCom.fn.cssObject(ele).setCss("top",(option.start_top + option.start_top_suffix));
       this.OpenbtnSetting(ele.id);
       this.ClosebtnSetting();
    };




    Modal.prototype.OpenbtnSetting = function(){
      var id = this.Element.id;
      var buttons = document.querySelectorAll("[modal-target="+id+"]"); // querySelectorAll의 반환값은 Array임 무조건
      if(buttons.length > 0){
          for(var index = 0; index < buttons.length; index++){
              buttons[index].addEventListener("click" , this.openModal);
          }
      }else{
          throw new Error("Modal을 이벤트를 수행 할 component가 존재하지 않습니다.");
      }
    };

    Modal.prototype.ClosebtnSetting = function(){
      var buttons = this.Element.getElementsByClassName("closeModal"); // getElementsByClassName의 반환값은 Array임 무조건

      if(buttons.length > 0){
          for(var index = 0; index < buttons.length; index++){
              buttons[index].setAttribute("modal-target", this.Element.id);
              buttons[index].addEventListener("click" , this.closeModal);
          }
      }
    };


    Modal.prototype.openModal = function(){
        var Ele = this.Element || this;
        var target = Ele.getAttribute("modal-target") || Ele.id;
        var modal = ( this === twCom.Modal[target] ? this : twCom.Modal[target] );

        if(modal){
          var modalElement = modal.Element;
          var shadowElement = modal.createShadow(target);
          var modalOption = modal.Option;

          TweenLite.to( shadowElement, modalOption.delay, { opacity : modalOption.shadow_opacity } );
          TweenLite.to( modalElement, modalOption.delay, modalOption.openOption);
        }else{
          throw new Error("Error Modal Open Error");
        }
    };



    Modal.prototype.closeModal = function(e){
      var Ele = this.Element || this;
      var target = Ele.getAttribute("modal-target") || Ele.id;
      var modal = ( this === twCom.Modal[target] ? this : twCom.Modal[target] );


      if(modal){
          var modalElement = modal.Element;
          var shadowElement = modal.shadowEle;
          var modalOption = modal.Option;
          modalOption.closeOption.onComplete = function(){
              shadowElement.parentElement.removeChild(shadowElement);
          };

          TweenLite.to( shadowElement, modalOption.delay, { opacity : 0 } );
          TweenLite.to(modalElement, modalOption.delay, modalOption.closeOption);
      }else{
        throw new Error("Error Modal Close Error");
      }
    };



    Modal.prototype.closeAnimation = function(){
         var shadowElement = this.shadowEle;
         var modalOption = this.Option;
         var Ele = this.Element;
    };



    Modal.prototype.setOption = function(Option){
        if( typeof Option === "object"){
            this.Option = this.Option.setOption(Option);
        }else{
            throw new Error("setOption의 인자는 Object");
        }
    };


    Modal.prototype.createShadow = function(id){
        var Shadowele = document.createElement("div");
        var Option = this.Option;
        Shadowele.id = "modal-shadow";
        Shadowele.setAttribute("modal-target",id);
        if( Option.shadow_onclick_close ){
            Shadowele.addEventListener("click",this.closeModal);
        }
        //옵션에서 준 Shadow_onclick_close  값에 따라 true면 그림자영역 클릭시 모달 close / false 이면 그림자영역 클릭이벤트를 설정하지않음.
        this.shadowEle = Shadowele;
        return document.body.appendChild(Shadowele);
    };

    return Modal;
})();

window.twCom.Modal = {};
window.twCom.Modal.init = ModalConstruct;
window.addEventListener("DOMContentLoaded",function(){
    var modallist = document.getElementsByClassName("modal");
    for(var i = 0 ; i < modallist.length; i++){
        if(modallist[i].id && !window.twCom.Modal[modallist[i].id]){
          window.twCom.Modal[modallist[i].id] = window.twCom.Modal.init(modallist[i].id);
        }
    }
});
window.addEventListener("load",function(){
    window.twCom.Modal["logmodal"].setOption({
      shadow_opacity : 0.5, //default 0.5 최소 0 , 최대 1
      start_top : "50",
      start_top_suffix : "%",
      end_top : "10",
      end_top_suffix : "%",
      modalOpen : function(){
          console.log("modalOpen event");
      },
      modalClose : function(){
          console.log("modalClose event");
      },
      shadow_onclick_close:false
    });
});


/***/ }),
/* 5 */
/***/ (function(module, exports) {

(function (win) {
   "use strict";

  var sideNav = {
    option : {
        width : "350", //sideNav width 250px
        suffix : "px",
        closeEvent : function(){
          console.log("Close Event !");
        },
        openEvent : function(){
            console.log("Open Event !");
        },
        delay : 0.25,
        easing : Power3.easeOut,
    },
    setoption : function (Opt) {
        if( typeof Opt === "object"){
            this.option = twCom.fn.extends(this.option , Opt);
        }else{
            throw new Error("option은 객체여야합니다.");
        }
    },
    sideNavInit : function(){
        var self = this;
        var option = this.option; //side-nav option을 가진 객체
        self.Element = document.getElementById("tw-sideNav");
        self.openTrigger = document.getElementById("openNav");
        self.closeTrigger = self.Element.querySelector("#closeNav");

        //sidenav Open 함수를 bind를 통해 this를 sidenav 객체로 바꿈
        self.openSideNav = self.opensSideNavfn.bind(self);
        self.closeSideNav = self.closeSideNavfn.bind(self);

        self.Element.style.width = option.width + option.suffix;

        self.closeTrigger.addEventListener("click",self.closeSideNav);
        self.openTrigger.addEventListener("click",self.openSideNav);
    },
    //sidenav open 함수
    opensSideNavfn : function(e){
          var self = this;
          var sideNav = self.Element;
          var option = self.option;
          var sidenavShadow =  self.createShadow("sha-ray", self.closeSideNav);

          //open Animation
          TweenLite.to(sidenavShadow, option.delay ,{
              opacity : 1,
              ease : option.easing,
          });
          TweenLite.to( sideNav, option.delay, {
            x : 0,
            onComplete : option.openEvent,
            ease : option.easing,
           });
    },
    closeSideNavfn : function(e){
      var self = this;
      var sideNav = self.Element;
      var option = self.option;
      var sidenavShadow = self.shadowEle;



      //close Animation
      TweenLite.to(sidenavShadow, option.delay ,{
          opacity : 0,
          ease : option.easing,
          onComplete: function(){
              sidenavShadow.parentElement.removeChild(sidenavShadow);
          }
      });
      TweenLite.to( sideNav, option.delay, {
        x : (option.width * -1),
        ease : option.easing,
        onComplete : option.closeEvent,
       });
    },
    createShadow : function(id, clickfn){
      var Shadowele = document.createElement("div");
      Shadowele.id=id;
      Shadowele.addEventListener("click",clickfn);
      this.shadowEle = Shadowele;
      return document.body.appendChild(Shadowele);
    }
  };


    win.twCom.sideNav = sideNav;

})(window);


/***/ }),
/* 6 */
/***/ (function(module, exports) {

(function(){
    "use strict";

  var waves = {
      config : {
        waves_color_list : {
            "yellow" : "wave-effect-yellow",
            "green" : "wave-effect-green",
            "black" : "wave-effect-black",
            "white" : "wave-effect-white",
            "red" : "wave-effect-red",
            "col-yellow" : "wave-effect-column-yellow",
            "col-green" : "wave-effect-column-green",
            "col-black" : "wave-effect-column-black",
            "col-white" : "wave-effect-column-white",
            "col-red" : "wave-effect-column-red",
        }
      },
      offset : function (elem) {
          var docElem, win,
              box = {top: 0, left: 0},
              doc = elem && elem.ownerDocument;

          docElem = doc.documentElement;
          if ( typeof elem.getBoundingClientRect !== typeof undefined ) {
              box = elem.getBoundingClientRect();
          }
          win = window;
          return {
              top: box.top + win.pageYOffset - docElem.clientTop,
              left: box.left + win.pageXOffset - docElem.clientLeft
          };
      },
      btnclick : function (e, element) {
        var ele = element || this;
        var offset = twCom.waves.offset(ele);
        //웨이브 이펙트를 실행할 엘리먼트가 있는지 먼저확인하고 없으면 생성
        if( ele.getElementsByClassName("wave").length === 0 ){
            var effect = document.createElement("span");
            twCom.fn.addClass(effect , "wave");
            var waves_list = twCom.waves.config.waves_color_list;
            var wavecolor = (waves_list[ele.getAttribute("waves-color")] ? waves_list[ele.getAttribute("waves-color")] : waves_list['white']);
            twCom.fn.addClass(effect , wavecolor);
            ele.insertBefore(effect , ele.firstChild);
        }

        //애니메이션 추가
        var animation = ele.getElementsByClassName("wave")[0];
        twCom.fn.removeClass(animation , "animate");


        //애니메이션 크기 지정전에 값이 있는지 확인
        if(!animation.offsetWidth && !animation.offsetHeight){
            var max = Math.max(ele.offsetWidth , ele.offsetHeight);
            animation.style.width = max+"px";
            animation.style.height = max+"px";
        }

        var x = e.pageX - offset.left - animation.offsetWidth / 2;
        var y = e.pageY - offset.top  - animation.offsetHeight / 2;
        animation.style.left = x +'px';
        animation.style.top =  y + 'px';
        twCom.fn.addClass(animation, "animate");
      },
      Waveliston : function () {
        var self = this;
        var btn = document.getElementsByClassName("waves-effect");
        self.btns = btn;
        for (var i = 0; i < btn.length; i++) {
          btn[i].addEventListener("click",self.btnclick);
        }
      },
  };


window.twCom.waves = waves;

})();
window.addEventListener("DOMContentLoaded", function(event) {
  twCom.waves.Waveliston();
  twCom.sideNav.sideNavInit();
});


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(0);
__webpack_require__(1);
module.exports = __webpack_require__(0);


/***/ })
/******/ ]);