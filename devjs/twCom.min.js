/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
__webpack_require__(2);
__webpack_require__(3);
__webpack_require__(5);
__webpack_require__(4);


/***/ }),
/* 1 */
/***/ (function(module, exports) {

if( typeof window.twCom === "undefined"){
    window.twCom = {};
}


(function(){
    "use strict";
      function Global (){

      }

      Global.prototype.addClass = function(Ele , ClassName) {
          if(Ele.classList && typeof ClassName === "string"){
              Ele.classList.add(ClassName);
          }else if (Ele.className && typeof ClassName === "string" ){
              Ele.className += " " + ClassName;
          }else{
              throw new Error("addClass의 인자는 (Element객체,'넣을클래스명') 으로 정의해야합니다.");
          }
      };


      Global.prototype.removeClass = function(Ele, ClassName) {
            if(Ele.classList && typeof ClassName === "string"){
                Ele.classList.remove(ClassName);
            }else if (Ele.className && typeof ClassName === "string" ){
                Ele.className = Ele.className.replace(new RegExp("(^|\\b)("+ClassName.split(' ').join("|")+")(\\b|$)","gi")," ");
            }else{
                throw new Error("removeClass의 인자는 (Element객체,'넣을클래스명 [구분자 공백]') 으로 정의해야합니다.");
            }
      };


      Global.prototype.hasClass = function(Ele , ClassName) {
          if(Ele.classList && typeof ClassName === "string"){
              return Ele.classList.contains(ClassName);
          }else if (Ele.className && typeof ClassName === "string" ){
              return new RegExp("(^|)" + ClassName + "(|$)","gi").test(Ele.className);
          }else{
              throw new Error("hasClass의 인자는 (Element객체,'넣을클래스명') 으로 정의해야합니다.");
          }
      };



      Global.prototype.extends = function(obj1 , obj2 , command) {
        var newObj = {};
        for(var prop in obj1){
          if(obj1.hasOwnProperty(prop)){
              newObj[prop] = obj1[prop];
          }
        }
        for(var ob in obj2){
            if(newObj.hasOwnProperty(ob)){
                newObj[ob] = obj2[ob];
            }
        }
        return newObj;
      };

      Global.prototype.cssObject = function(element){
          var Ele = element;
          var css = Ele.currentStyle || window.getComputedStyle(Ele);
          return {
            getCss : function(prop){
              if( typeof prop === "string" ){
                return css[prop];
              } else {
                throw new Error("Css propertyName은 String 으로 정의해주세요.");
              }
            },
            setCss : function(prop , value){
                Ele.style[prop] = value;
            },
            cssEach : function(cssobj){

                for (var key in cssobj){
                  if(cssobj.hasOwnProperty(key)){
                      Ele.style[key] = cssobj[key];
                  }
                }

            }
          };
      };

      Global.prototype.convertStyle = function (obj) {
          var style = '';

          for (var a in obj) {
              if (obj.hasOwnProperty(a)) {
                  style += (a + ':' + obj[a] + ';');
              }
          }

          return style;
      };


    twCom.fn = new Global();
})();


/***/ }),
/* 2 */
/***/ (function(module, exports) {

(function () {
    "use strict";


      function TextField() {
          // input field 생성자
          if ( this instanceof TextField ){
            this.Elements = document.querySelectorAll("input:not([type]),input[type=text],input[type=password],input[type=email],input[type=url],input[type=time],input[type=date],input[type=datetime],input[type=datetime-local],input[type=tel],input[type=number],input[type=search]");
            this.Init();

          }else{
             return new TextField();
          }
      }




      TextField.prototype.Init = function(){
          var text_fields = this.Elements;
          for (var i = 0; i < text_fields.length; i++) {
            text_fields[i].addEventListener("focus", this.field_focus);
            text_fields[i].addEventListener("blur", this.field_blur);
          }
      };
      TextField.prototype.field_focus = function(){
        twCom.fn.addClass(this , "active");
      };
      TextField.prototype.field_blur = function(){
        twCom.fn.removeClass(this,"active");
        //중첩 3항 연산자 text_field안에 value가 존재하면 valid라는 class 를 추가하고 value가 존재하지않으면 valid 클래스를 제거해야함
        //즉 text_field 내에 입력값이 존재하면 valid 라는 class를 추가하고 없으면 field 내에 valid 라는 클래스를 찾아서 있으면 제거함
        (this.value.length > 0 ? twCom.fn.addClass(this,"valid") : ( twCom.fn.hasClass(this,"valid") ? twCom.fn.removeClass(this,"valid") : "" ));

      };




      function SelectBox(){
        if ( this instanceof SelectBox ){
          this.selects = document.querySelectorAll("select:not(.browser-default)");
          this.Elements = document.getElementsByClassName("tw-select-box");
          this.selectInit();
          this.selectSet();
        } else {
           return new SelectBox();
        }
      }



      SelectBox.prototype.selectInit = function(){
          var select_Ele_list = this.selects;
          var self = this;
          for (var i = 0; i < select_Ele_list.length; i++) {
              var select_box = document.createElement("div");
              var input = document.createElement("input");
              var input_line = document.createElement("hr");
              var select_ul = document.createElement("ul");
              var down_caret = document.createElement("i");


                for (var j = 0; j < select_Ele_list[i].options.length; j++) {
                    var select_option =  select_Ele_list[i].options[j];
                    var li = document.createElement("li");

                    self.optionExtend(li , select_option , input);
                    select_ul.appendChild(li);
                }

              self.attrExtends(input , select_Ele_list[i]);
              select_box.className = "tw-select-box tw-input-field";
              select_ul.className = "tw-dropdown select-dropdown";
              input_line.className = "bottomline";
              input.setAttribute("readonly","true");
              down_caret.className = "fa fa-caret-down select-caret-down";

              select_box.appendChild(down_caret);
              select_box.appendChild(input);
              select_box.appendChild(input_line);
              select_box.appendChild(select_ul);
              select_Ele_list[i].outerHTML = select_box.outerHTML;
          }
      };


      SelectBox.prototype.optionExtend = function(litag,  Option, input){
          var self = this;
          var span = document.createElement("span");
          var value = Option.getAttribute("value") || Option.innerText;

           litag.setAttribute("value", value);
           span.innerText = Option.innerText;

           if ( Option.selected ){
             twCom.fn.addClass(litag , "selected");
             input.setAttribute("value",litag.getAttribute("value"));
           }

           if ( Option.disabled ){
             twCom.fn.addClass(litag ,  "disabled");
           }

           litag.appendChild(span);
      };

      SelectBox.prototype.attrExtends = function(childEle, parentEle){
          childEle.id = parentEle.id;
          childEle.className = parentEle.className + " select-input";
          childEle.name = parentEle.name;
      };
      SelectBox.prototype.selectSet = function(){
        var Elements = this.Elements;
        var self = this;

        for(var i = 0; i < Elements.length; i++){
            var select_input = Elements[i].getElementsByClassName("select-input")[0];
            var select_dropdown = Elements[i].getElementsByClassName("select-dropdown")[0];
            Elements[i].addEventListener("focusin", self.selectOpen);
            Elements[i].addEventListener("focusout", self.selectClose);

            if ( "ontouchstart" in window ){
              select_dropdown.addEventListener("touchstart", self.seleted);
            }
            select_dropdown.addEventListener("mousedown", self.seleted);
         }
      };

      var selectOption = {
          duration : 200,
          closeOption : {
            opacity : 0,
            scaleY : 0.7,
            display : "none",
          },
          openOption : {
            opacity : 1,
            scaleY : 1,
            display : "block",
          }
      };

      SelectBox.prototype.selectOpen = function(e){
         var select_element = this;
         var select_dropdown = select_element.getElementsByClassName("select-dropdown")[0];
         var select_column = select_dropdown.getElementsByTagName("li");
         var column_css = twCom.fn.cssObject(select_column[0]);
         var dropdown_css = twCom.fn.cssObject(select_dropdown);
         var regExp = new RegExp("px|rem");
         var unit = regExp.exec(column_css.getCss("min-height"));
         var height= column_css.getCss("min-height").replace(regExp, "") * select_column.length;

         var htmlCss, htmlElement, scrollBottom, elOffset;
         var dropdown_style = {top : 0};
         var transOrigin = "0px 0px";


         if( unit[0] === "rem" ){
             htmlElement = document.getElementsByTagName("html")[0];
             htmlCss = twCom.fn.cssObject(htmlElement);
             height = Number(height) * htmlCss.getCss("fontSize").replace(regExp , "");
         }

         if ( height > 500 ) height = 500 ;
         elOffset = select_element.getBoundingClientRect();

         scrollBottom = (document.documentElement.clientHeight - document.body.getBoundingClientRect().top)
                          - (this.offsetTop - this.getBoundingClientRect().height / 2);

          if ( scrollBottom <= height ){

              dropdown_style.top = height - elOffset.height;
              transOrigin = "100% 100%";

          }

          dropdown_style.top = "-" + dropdown_style.top + "px";
          dropdown_style["-webkit-transform-origin"] = transOrigin;
          dropdown_style["-moz-transform-origin"] = transOrigin;
          dropdown_style["-o-transform-origin"] = transOrigin;
          dropdown_style["transform-origin"] = transOrigin;
          dropdown_style["-webkit-transform-origin"] = transOrigin;


          dropdown_css.cssEach(dropdown_style);

          TweenLite.to( select_dropdown, (selectOption.duration / 1000), selectOption.openOption);
      };

      SelectBox.prototype.selectClose = function(e){
         var select_element = this;
         var select_dropdown = select_element.getElementsByClassName("select-dropdown")[0];
         var select_options = select_dropdown.getElementsByTagName("li");

         TweenLite.to( select_dropdown, (selectOption.duration / 1000), selectOption.closeOption);
      };




      SelectBox.prototype.seleted = function(e){
        var targetEle = e.target || e.srcElement;
        var self = this;
        var select_dropdown = self;
        var select_box = self.parentElement;
        var select_input = select_box.getElementsByTagName("input")[0];

        if(twCom.fn.hasClass(targetEle,"disabled") || twCom.fn.hasClass(targetEle.parentElement,"disabled")){
             return false;
        }


        var selectedElement = self.getElementsByClassName("selected")[0];

        if( selectedElement ){
          twCom.fn.removeClass(selectedElement, "selected");
        }

        var value = targetEle.getAttribute("value") ||  targetEle.parentElement.getAttribute("value");
        select_input.setAttribute("value", value);
        twCom.fn.addClass(targetEle, "selected");


        TweenLite.to( select_dropdown, (selectOption.duration / 1000), selectOption.closeOption);
      };



      window.addEventListener("DOMContentLoaded",function(){
          twCom.form = {textField : TextField() , select : SelectBox()};
      });
})();


/***/ }),
/* 3 */
/***/ (function(module, exports) {

(function(){
    "use strict";




    var DefaultOption = function(){
      this.shadow_opacity = 0.6;  //default 0.5 최소 0 , 최대 1
      this.start_top = "60";
      this.start_top_suffix = "%";
      this.end_top = "20";
      this.end_top_suffix = "%";
      this.modalOpen = function(){};
      this.modalClose = function(){};
      this.delay = 0.50;
      this.shadow_onclick_close = true;

      this.openOption = {
        display:"block",
        top: (this.end_top+this.end_top_suffix),
        scaleX : 1,
        opacity : 1,
        ease: Power3.easeOut,
        onComplete:this.modalOpen
      };

      this.closeOption = {
        display:"none",
        top: (this.start_top + this.start_top_suffix),
        scaleX : 0.7,
        opacity : 0,
        ease: Power3.easeOut,
        onComplete:this.modalClose
      };

    };

    DefaultOption.prototype.setOption = function(newOption){
      var myOption = this;
      for( var prop in newOption ){
        if( myOption.hasOwnProperty(prop) ){
          myOption[prop] = newOption[prop];
        }
      }
      return myOption;
    };


    function Modal(modalElement){
      if( this instanceof Modal ){
        this.Element = document.getElementById(modalElement) || modalElement;
        this.Init();
      } else {
        return new Modal(modalElement);
      }
    }


    Modal.prototype.Init = function(){
       var self = this;
       var ele = this.Element;
       var option = this.Option = new DefaultOption();
       twCom.fn.cssObject(ele).setCss("top",(option.start_top + option.start_top_suffix));
       this.OpenbtnSetting(ele.id);
       this.ClosebtnSetting();
    };




    Modal.prototype.OpenbtnSetting = function(){
      var id = this.Element.id;
      var buttons = document.querySelectorAll("[data-target="+id+"]"); // querySelectorAll의 반환값은 Array임 무조건
      if(buttons.length > 0){
          for(var index = 0; index < buttons.length; index++){
              buttons[index].addEventListener("click" , this.openModal);
          }
      }else{
          throw new Error("Modal을 이벤트를 수행 할 component가 존재하지 않습니다.");
      }
    };

    Modal.prototype.ClosebtnSetting = function(){
      var buttons = this.Element.getElementsByClassName("closeModal"); // getElementsByClassName의 반환값은 Array임 무조건

      if(buttons.length > 0){
          for(var index = 0; index < buttons.length; index++){
              buttons[index].setAttribute("data-target", this.Element.id);
              buttons[index].addEventListener("click" , this.closeModal);
          }
      }
    };


    Modal.prototype.openModal = function(){
        var Ele = this.Element || this;
        var target = Ele.getAttribute("data-target") || Ele.id;
        var modal = ( this === twCom.Modal[target] ? this : twCom.Modal[target] );

        if(modal){
          var modalElement = modal.Element;
          var shadowElement = modal.createShadow(target);
          var modalOption = modal.Option;

          TweenLite.to( shadowElement, modalOption.delay, { opacity : modalOption.shadow_opacity } );
          TweenLite.to( modalElement, modalOption.delay, modalOption.openOption);
        }else{
          throw new Error("Error Modal Open Error");
        }
    };



    Modal.prototype.closeModal = function(e){
      var Ele = this.Element || this;
      var target = Ele.getAttribute("data-target") || Ele.id;
      var modal = ( this === twCom.Modal[target] ? this : twCom.Modal[target] );


      if(modal){
          var modalElement = modal.Element;
          var shadowElement = modal.shadowEle;
          var modalOption = modal.Option;


          TweenLite.to( shadowElement, modalOption.delay, {
            opacity : 0,
            onComplete: function(){
              if ( shadowElement ){
                 shadowElement.parentElement.removeChild(shadowElement);
              }
            }
        });
          TweenLite.to(modalElement, modalOption.delay, modalOption.closeOption);
      }else{
        throw new Error("Error Modal Close Error");
      }
    };



    Modal.prototype.closeAnimation = function(){
         var shadowElement = this.shadowEle;
         var modalOption = this.Option;
         var Ele = this.Element;
    };



    Modal.prototype.setOption = function(Option){
        if( typeof Option === "object"){
            this.Option = this.Option.setOption(Option);
        }else{
            throw new Error("setOption의 인자는 Object");
        }
    };


    Modal.prototype.createShadow = function(id){
        var Shadowele = document.createElement("div");
        var Option = this.Option;
        Shadowele.id = "modal-shadow";
        Shadowele.setAttribute("data-target",id);
        if( Option.shadow_onclick_close ){
            Shadowele.addEventListener("click",this.closeModal);
        }
        //옵션에서 준 Shadow_onclick_close  값에 따라 true면 그림자영역 클릭시 모달 close / false 이면 그림자영역 클릭이벤트를 설정하지않음.
        this.shadowEle = Shadowele;
        return document.body.appendChild(Shadowele);
    };

    window.twCom.Modal = { init : Modal };
})();

window.addEventListener("DOMContentLoaded",function(){
    twCom.Modal.list = document.getElementsByClassName("modal");
    twCom.Modal["logmodal"] = twCom.Modal.init(document.getElementById("logmodal"));
    twCom.Modal["logmodal2"] = twCom.Modal.init(document.getElementById("logmodal2"));
});


/***/ }),
/* 4 */
/***/ (function(module, exports) {

(function () {
   "use strict";

    function getSidenavtrigger(e) {

        var element = e.target || e.srcElement;
        var target = null;
        while( element.parentElement !== null ) {
            if ( element.getAttribute("data-sidenav") ){
                target = element;
                break;
            }
            element = element.parentElement;
        }

        return target;
    }

    function getSidenavElement(e, element){
        var sidenav_id;
        if ( typeof e === "object" && typeof element === "object" ) {
            sidenav_id = element.getAttribute("data-sidenav");
            return document.getElementById(sidenav_id);
        }else{
            sidenav_id = e || element;
            return document.getElementById(sidenav_id);
        }
    }

    function createShadow(sidenavElement){
        var shadow_bool = Boolean(sidenavElement.getAttribute("shadow")) || true;

        if (!shadow_bool){
            return false;
        }
        var element = document.getElementById("shadow-area");
        if ( element === null ){
          var shadow_ele = document.createElement("div");
          shadow_ele.setAttribute("id", "shadow-area");
          shadow_ele.setAttribute("data-sidenav", sidenavElement.getAttribute("id"));
          shadow_ele.setAttribute("data-trigger", "close");

          return document.body.appendChild(shadow_ele);
        } else {
            return element;
        }
    }

    function getShadowElement(element){
        if ( element.getAttribute("id") === "shadow-area" ){
            return element;
        }else{
            return document.getElementById("shadow-area");
        }
    }

    var sideNav = {
        duration : 150,

        open : function (e, element) {
            var sidenavElement = getSidenavElement(e, element);
            var cssObject = {}, cssObject2 = {}, cssObject3 = {};

            if ( sidenavElement === null ){
                return false;
            }

            var shadowELement = createShadow(sidenavElement);
            var sidenav_css = twCom.fn.cssObject(sidenavElement);
            var shadow_css = twCom.fn.cssObject(shadowELement);


            // sidenav css설정 custom attribute에서 설정한값 default = 300
            cssObject["width"] = sidenavElement.getAttribute("data-width") || 300;
            cssObject["width"] += "px";
            var translateX = "translateX(0px)";
            cssObject['-webkit-transform'] = translateX;
            cssObject['-moz-transform'] = translateX;
            cssObject['-ms-transform'] = translateX;
            cssObject['-o-transform'] = translateX;
            cssObject.transform = translateX;


            //animation 시간
            cssObject['-webkit-transition-duration'] = sideNav.duration + 'ms';
            cssObject['-moz-transition-duration']    = sideNav.duration + 'ms';
            cssObject['-o-transition-duration']      = sideNav.duration + 'ms';
            cssObject['transition-duration']         = sideNav.duration + 'ms';

            //easing
            var easing = "cubic-bezier(0.17, 0.67, 0.79, 1)";
            cssObject['-webkit-transition-timing-function'] = easing;
            cssObject['-moz-transition-timing-function']    = easing;
            cssObject['-o-transition-timing-function']      = easing;
            cssObject['transition-timing-function']         = easing;



            // 그림자영역 css 설정
            cssObject2["opacity"] = 1;

            //animation 시간
            cssObject2['-webkit-transition-duration'] = sideNav.duration + 'ms';
            cssObject2['-moz-transition-duration']    = sideNav.duration + 'ms';
            cssObject2['-o-transition-duration']      = sideNav.duration + 'ms';
            cssObject2['transition-duration']         = sideNav.duration + 'ms';

            cssObject2['-webkit-transition-timing-function'] = easing;
            cssObject2['-moz-transition-timing-function']    = easing;
            cssObject2['-o-transition-timing-function']      = easing;
            cssObject2['transition-timing-function']         = easing;

            //drag target CSS 변경
            var dragTarget = document.getElementById("drag-target");
            var dragTarget_css = twCom.fn.cssObject(dragTarget);
            cssObject3 = {
                right : 0,
                width : "90%",
            };

            requestAnimationFrame(function(){
              sidenav_css.cssEach(cssObject);
              shadow_css.cssEach(cssObject2);
              dragTarget_css.cssEach(cssObject3);
              document.body.style.overflow = "hidden";
            });
        },
        close : function(e , element){

            var shadow_element = getShadowElement(element);

            if ( shadow_element === null ){
                return false;
            }

            var sidenav_element = getSidenavElement(e, shadow_element);
            var sidenav_css = twCom.fn.cssObject(sidenav_element), shadow_css = twCom.fn.cssObject(shadow_element);
            var sidenav_width = sidenav_css.getCss("width");
            var cssObject = {}, cssObject2 = {}, cssObject3 = {};


            var translateX = "translateX(" + ("-" + sidenav_width) + ")";

            cssObject['-webkit-transform'] = translateX;
            cssObject['-moz-transform'] = translateX;
            cssObject['-ms-transform'] = translateX;
            cssObject['-o-transform'] = translateX;
            cssObject.transform = translateX;



            //animation 시간
            cssObject['-webkit-transition-duration'] = sideNav.duration + 'ms';
            cssObject['-moz-transition-duration']    = sideNav.duration + 'ms';
            cssObject['-o-transition-duration']      = sideNav.duration + 'ms';
            cssObject['transition-duration']         = sideNav.duration + 'ms';

            //easing
            var easing = "cubic-bezier(0.17, 0.67, 0.79, 1)";
            cssObject['-webkit-transition-timing-function'] = easing;
            cssObject['-moz-transition-timing-function']    = easing;
            cssObject['-o-transition-timing-function']      = easing;
            cssObject['transition-timing-function']         = easing;


            cssObject2["opacity"] = 0;
            //animation 시간
            cssObject2['-webkit-transition-duration'] = sideNav.duration + 'ms';
            cssObject2['-moz-transition-duration']    = sideNav.duration + 'ms';
            cssObject2['-o-transition-duration']      = sideNav.duration + 'ms';
            cssObject2['transition-duration']         = sideNav.duration + 'ms';

            cssObject2['-webkit-transition-timing-function'] = easing;
            cssObject2['-moz-transition-timing-function']    = easing;
            cssObject2['-o-transition-timing-function']      = easing;
            cssObject2['transition-timing-function']         = easing;

            //drag target CSS 변경
            var dragTarget = document.getElementById("drag-target");
            var dragTarget_css = twCom.fn.cssObject(dragTarget);
            cssObject3 = {
                right : "",
                width : "",
            };

            sidenav_css.cssEach(cssObject);
            shadow_css.cssEach(cssObject2);
            dragTarget_css.cssEach(cssObject3);
            document.body.style.overflow = "";
            setTimeout(function(){
                try{
                    shadow_element.parentElement.removeChild(shadow_element);
                }catch( exception ){
                    return false;
                }
            }, sideNav.duration);


        }
    };

    function triggerCheck(e){

        var sideNav_trigger = getSidenavtrigger(e);
        if ( e instanceof TouchEvent && sideNav_trigger.getAttribute("id") === "drag-target") {
            return false;
        }
        var trigger_type = sideNav_trigger.getAttribute("data-trigger") || "open";


          if ( sideNav_trigger !== null ){

            sideNav[trigger_type](e, sideNav_trigger);

          }
    }


    function swipe(e, element){


        var sidenav_element = getSidenavElement(e, element);
        var shadowELement = createShadow(sidenav_element);

        var sideEle_css = twCom.fn.cssObject(sidenav_element);
        var width = sidenav_element.getAttribute("data-width") || 300;
        width = Number(width);
        var x = (e.center.x - width);


        if( x > 0 ){
            x = 0;
        }
        if ( x < -width ){
            x = -width;
        }
        var opacity = (10000  / width);
        opacity = opacity / (opacity * width);
        opacity = opacity * (width + x);

        shadowELement.setAttribute("style", "opacity :" + opacity + ";");

        var cssObject = {};
        var translateX = "translateX("+x+"px)";

        cssObject['width'] = width + "px";
        cssObject['-webkit-transform'] = translateX;
        cssObject['-moz-transform'] = translateX;
        cssObject['-ms-transform'] = translateX;
        cssObject['-o-transform'] = translateX;
        cssObject.transform = translateX;
        sidenav_element.setAttribute("style" , twCom.fn.convertStyle(cssObject));
    }

    function swipeEnd(e, element){
        var sidenav_element = getSidenavElement(e, element);
        var sideEle_css = twCom.fn.cssObject(sidenav_element);
        var width = sidenav_element.getAttribute("data-width") || 300;
        var tx =  sideEle_css.getCss("transform").split(",")[4];
        var currentX = Number(width) + Number(tx);
        console.log(currentX);
        console.log((width / 2));
        if ( currentX >= (width / 2) ){
            sideNav.open(e, element);
        }else{
            sideNav.close(e, element);
        }
    }

    window.addEventListener("DOMContentLoaded", function (e) {
        if ('ontouchstart' in window) {
            document.body.addEventListener('touchend', triggerCheck, false);
        }else{
            document.body.addEventListener('click', triggerCheck, false);
        }

        var drag_element = document.getElementById("drag-target");
        if( drag_element !== null ){
          var mc = new Hammer(drag_element);

          mc.on("panleft panright panend pancancel", function(e){
            if( e.type === "panright" || e.type === "panleft"   ){
              swipe(e, drag_element);
            }else{
              swipeEnd(e, drag_element);
            }
          });
        }

    });
})();


/***/ }),
/* 5 */
/***/ (function(module, exports) {

(function(){
  "use strict";

  var waves_colorList = {
    "white" : "wave-color-white",
    "black" : "wave-color-black",
    "green" : "wave-color-green",
    "yellow" : "wave-color-yellow",
    "red" : "wave-color-red",
    "white2" : "wave-color-white2",
    "black2" : "wave-color-black2",
    "green2" : "wave-color-green2",
    "yellow2" : "wave-color-yellow2",
    "red2" : "wave-color-red2",
  };


  function offset(elem){
    var docElem,
        box = {top: 0, left: 0},
        doc = elem && elem.ownerDocument;

    docElem = doc.documentElement;
    if ( typeof elem.getBoundingClientRect !== typeof undefined ) {
        box = elem.getBoundingClientRect();
    }

    return {
        top: box.top + window.pageYOffset - docElem.clientTop,
        left: box.left + window.pageXOffset - docElem.clientLeft
    };
  }




  var Effect = {
    duration : 750,

    show : function(e, ele){

        var element = ele || this;


        var effectElement = document.createElement("span");

        twCom.fn.addClass(effectElement , "wave");

        element.appendChild(effectElement);
        // wave color 설정
        var color = element.getAttribute("data-waveColor") || "white2";

        twCom.fn.addClass(effectElement , waves_colorList[color]);

        var eleOffset  = offset(element);
        var ElementX = 0;
        var ElementY = 0;
        var scaleWidth = Math.max(element.clientWidth, element.clientHeight);
        if ( "changedTouches" in e ){
          ElementY   = (e.changedTouches[0].pageY - eleOffset.top);
          ElementX   = (e.changedTouches[0].pageX  - eleOffset.left);
        }else{
          ElementY   = (e.pageY - eleOffset.top);
          ElementX   = (e.pageX - eleOffset.left);
        }
        var scale       = 'scale('+((scaleWidth / 100) * 10)+')';



        effectElement.setAttribute('data-timestamp', Date.now());



        // ripple position 설정
        var rippleStyle = {
            'top': ElementY+'px',
            'left': ElementX+'px',
        };

        //sale 크기
        rippleStyle['-webkit-transform'] = scale;
        rippleStyle['-moz-transform'] = scale;
        rippleStyle['-ms-transform'] = scale;
        rippleStyle['-o-transform'] = scale;
        rippleStyle.transform = scale;
        rippleStyle.opacity   = '1';

        //animation 시간
        rippleStyle['-webkit-transition-duration'] = Effect.duration + 'ms';
        rippleStyle['-moz-transition-duration']    = Effect.duration + 'ms';
        rippleStyle['-o-transition-duration']      = Effect.duration + 'ms';
        rippleStyle['transition-duration']         = Effect.duration + 'ms';

        //easing
        rippleStyle['-webkit-transition-timing-function'] = 'cubic-bezier(0.250, 0.460, 0.450, 0.940)';
        rippleStyle['-moz-transition-timing-function']    = 'cubic-bezier(0.250, 0.460, 0.450, 0.940)';
        rippleStyle['-o-transition-timing-function']      = 'cubic-bezier(0.250, 0.460, 0.450, 0.940)';
        rippleStyle['transition-timing-function']         = 'cubic-bezier(0.250, 0.460, 0.450, 0.940)';

        effectElement.setAttribute("style" , twCom.fn.convertStyle(rippleStyle));
    },

    hide : function(e){

        var ele = this;

       //엘리먼트에서 최근 생성된 wave 이펙트 엘리먼트 찾기
        var ripple = null;
        var ripples = ele.getElementsByClassName('wave');
        if (ripples.length > 0) {
            ripple = ripples[ripples.length - 1];
        } else {
            return false;
        }

        var time = Number(Date.now()) -  ripple.getAttribute("data-timestamp");
        var removeTime = Effect.duration / 2 - time;
        if ( removeTime < 0 ){
           removeTime = 0;
        }

        var ripplestyle = {
          "opacity" : "0",
        };

        var element_removeDelay = Effect.duration - removeTime;



        setTimeout(function(){
          ripple.style.opacity = 0;
            setTimeout(function () {
                try {
                  ele.removeChild(ripple);
                } catch (exception){
                  return;
                }
            }, element_removeDelay);
        },removeTime);
    }
  };

  function getWavesEffectElemet(e){
      var element = null;
      var target = e.target || e.srcElement;

      //이벤트 엘리먼트에서 waves-effect 라는 클래스를 찾아보고 없으면 자신의 부모엘리먼트를 순환하면서 찾는구조이며
      //없을시에는 element 값에 null 반환
      //있을시에는 element 변수에  waves-effect class를 가지고있는 엘리먼트를 치환하고 element 변수를 리턴시킨다.
      while (target.parentElement !== null) {
          if( twCom.fn.hasClass(target, "waves-effect") ){
              element = target;
              break;
          }
          target = target.parentElement;
      }
      return element;
  }


  function showEffect(e){
      var element = getWavesEffectElemet(e);


      if( element !== null ){
          Effect.show(e, element);
          if( "ontouchend" in window ) {
              element.addEventListener('touchend', Effect.hide, false);
              element.addEventListener('touchcancel', Effect.hide, false);
          }
          element.addEventListener('mouseup', Effect.hide, false);
          element.addEventListener('mouseleave', Effect.hide, false);
      }
  }

  window.addEventListener("DOMContentLoaded", function(e) {
      if ('ontouchstart' in window) {
         document.body.addEventListener('touchstart', showEffect, false);
      }else{
        document.body.addEventListener('mousedown', showEffect, false);
      }
  });
})();


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(0);
module.exports = __webpack_require__(0);


/***/ })
/******/ ]);